"""""""""""""""""""""""""""""""""
Tyler Philp
University of Queensland
43946561
Honours Project

Notes: The mass is not being iterated over correctly
Need to fix so that each one is individually calculated
"""""""""""""""""""""""""""""""""
import numpy as np
import matplotlib.pyplot as plt
import math
from scipy import linalg as la
import pandas as pd
import cProfile
import re

df = pd.read_csv('Sample01.csv')
z = df.z
x_c = df.x_c
y_c = df.y_c
z_c = df.z_c
vx = df.vx
vy = df.vy
vz = df.vz
vr = df.vr
log_m = df.log_m
Mass_gal = df.Mass
print(Mass_gal.shape)

r_i = np.concatenate((x_c,y_c), axis = 0)
r_i = np.reshape(r_i, (len(x_c),2))
print(r_i.shape)
w_i = Mass_gal

#Simplify to single mass and a single vector
#The mass of the objects w_i and their location r_i
#w_i = np.array([5*10**6,5*10**4,5*10**8,5*10**3])

#r_i = np.matrix([[-250,-250],[-250,250],[250,250],[250,-250]])


r_squeeze = np.array([[50,50],[50,100],[50,150],[50,200],[50,250],[50,300],[50,350],[50,400],[50,450],[50,500],
              [100,50],[100,100],[100,150],[100,200],[100,250],[100,300],[100,350],[100,400],[100,450],[100,500],
              [200,50],[200,100],[200,150],[200,200],[200,250],[200,300],[200,350],[200,400],[200,450],[200,500],
              [300,50],[300,100],[300,150],[300,200],[300,250],[300,300],[300,350],[300,400],[300,450],[300,500],
              [400,50],[400,100],[400,150],[400,200],[400,250],[400,300],[400,350],[400,400],[400,450],[400,500],
              [500,50],[500,100],[500,150],[500,200],[500,250],[500,300],[500,350],[500,400],[500,450],[500,500],
              [150,50],[150,100],[150,150],[150,200],[150,250],[150,300],[150,350],[150,400],[150,450],[150,500],
              [250,50],[250,100],[250,150],[250,200],[250,250],[250,300],[250,350],[250,400],[250,450],[250,500],
              [350,50],[350,100],[350,150],[350,200],[350,250],[350,300],[350,350],[350,400],[350,450],[350,500],
              [450,50],[450,100],[450,150],[450,200],[450,250],[450,300],[450,350],[450,400],[450,450],[450,500],
              [0,50],[0,100],[0,150],[0,200],[0,250],[0,300],[0,350],[0,400],[0,450],[0,500],[-50,50],[-50,100],[-50,150],
              [-50,200],[-50,250],[-50,300],[-50,350],[-50,400],[-50,450],[-50,500],
              [-100,50],[-100,100],[-100,150],[-100,200],[-100,250],[-100,300],[-100,350],[-100,400],[-100,450],[-100,500],
              [-200,50],[-200,100],[-200,150],[-200,200],[-200,250],[-200,300],[-200,350],[-200,400],[-200,450],[-200,500],
              [-300,50],[-300,100],[-300,150],[-300,200],[-300,250],[-300,300],[-300,350],[-300,400],[-300,450],[-300,500],
              [-400,50],[-400,100],[-400,150],[-400,200],[-400,250],[-400,300],[-400,350],[-400,400],[-400,450],[-400,500],
              [-500,50],[-500,100],[-500,150],[-500,200],[-500,250],[-500,300],[-500,350],[-500,400],[-500,450],[-500,500],
              [-150,50],[-150,100],[-150,150],[-150,200],[-150,250],[-150,300],[-150,350],[-150,400],[-150,450],[-150,500],
              [-250,50],[-250,100],[-250,150],[-250,200],[-250,250],[-250,300],[-250,350],[-250,400],[-250,450],[-250,500],
              [-350,50],[-350,100],[-350,150],[-350,200],[-350,250],[-350,300],[-350,350],[-350,400],[-350,450],[-350,500],
              [-450,50],[-450,100],[-450,150],[-450,200],[-450,250],[-450,300],[-450,350],[-450,400],[-450,450],[-450,500],
              [50,-50],[50,-100],[50,-150],[50,-200],[50,-250],[50,-300],[50,-350],[50,-400],[50,-450],[50,-500],
              [100,-50],[100,-100],[100,-150],[100,-200],[100,-250],[100,-300],[100,-350],[100,-400],[100,-450],[100,-500],
              [200,-50],[200,-100],[200,-150],[200,-200],[200,-250],[200,-300],[200,-350],[200,-400],[200,-450],[200,-500],
              [300,-50],[300,-100],[300,-150],[300,-200],[300,-250],[300,-300],[300,-350],[300,-400],[300,-450],[300,-500],
              [400,-50],[400,-100],[400,-150],[400,-200],[400,-250],[400,-300],[400,-350],[400,-400],[400,-450],[400,-500],
              [500,-50],[500,-100],[500,-150],[500,-200],[500,-250],[500,-300],[500,-350],[500,-400],[500,-450],[500,-500],
              [150,-50],[150,-100],[150,-150],[150,-200],[150,-250],[150,-300],[150,-350],[150,-400],[150,-450],[150,-500],
              [250,-50],[250,-100],[250,-150],[250,-200],[250,-250],[250,-300],[250,-350],[250,-400],[250,-450],[250,-500],
              [350,-50],[350,-100],[350,-150],[350,-200],[350,-250],[350,-300],[350,-350],[350,-400],[350,-450],[350,-500],
              [450,-50],[450,-100],[450,-150],[450,-200],[450,-250],[450,-300],[450,-350],[450,-400],[450,-450],[450,-500],
              [0,-50],[0,-100],[0,-150],[0,-200],[0,-250],[0,-300],[0,-350],[0,-400],[0,-450],[0,-500],
              [-50,-50],[-50,-100],[-50,-150],[-50,-200],[-50,-250],[-50,-300],[-50,-350],[-50,-400],[-50,-450],[-50,-500],
              [-100,-50],[-100,-100],[-100,-150],[-100,-200],[-100,-250],[-100,-300],[-100,-350],[-100,-400],[-100,-450],[-100,-500],
              [-200,-50],[-200,-100],[-200,-150],[-200,-200],[-200,-250],[-200,-300],[-200,-350],[-200,-400],[-200,-450],[-200,-500],
              [-300,-50],[-300,-100],[-300,-150],[-300,-200],[-300,-250],[-300,-300],[-300,-350],[-300,-400],[-300,-450],[-300,-500],
              [-400,-50],[-400,-100],[-400,-150],[-400,-200],[-400,-250],[-400,-300],[-400,-350],[-400,-400],[-400,-450],[-400,-500],
              [-500,-50],[-500,-100],[-500,-150],[-500,-200],[-500,-250],[-500,-300],[-500,-350],[-500,-400],[-500,-450],[-500,-500],
              [-150,-50],[-150,-100],[-150,-150],[-150,-200],[-150,-250],[-150,-300],[-150,-350],[-150,-400],[-150,-450],[-150,-500],
              [-250,-50],[-250,-100],[-250,-150],[-250,-200],[-250,-250],[-250,-300],[-250,-350],[-250,-400],[-250,-450],[-250,-500],
              [-350,-50],[-350,-100],[-350,-150],[-350,-200],[-350,-250],[-350,-300],[-350,-350],[-350,-400],[-350,-450],[-350,-500],
              [-450,-50],[-450,-100],[-450,-150],[-450,-200],[-450,-250],[-450,-300],[-450,-350],[-450,-400],[-450,-450],[-450,-500],
              [50,0],[100,0],[150,0],[200,0],[250,0],[300,0],[350,0],[400,0],[450,0],[500,0],
              [-50,0],[-100,0],[-150,0],[-200,0],[-250,0],[-300,0],[-350,0],[-400,0],[-450,0],[-500,0]
              ])

#Smoothing function (Equation 4)

def SmthFunc(Ri, R, rs):
    Smth = np.array([])
    for i in range(len(R)):
        for j in range(len(Ri)):
            if la.norm(Ri[j]-R[i])<rs:
                Sm_Func = (la.norm(Ri[j]-R[i])**3)/rs**3
                
            else:
                Sm_Func = 1
            Smth = np.append(Smth, Sm_Func)
    return(Smth)

    
Smooth = SmthFunc(r_i, r_squeeze, 100)
Smooth = np.matrix(Smooth)

beta = 1
rho = np.array(sum(w_i)/(math.pi*1000**2), dtype = float)



#Reshape the functions into arrays
Smooth = np.squeeze(np.asarray(Smooth))
r_i = np.squeeze(np.asarray(r_i))
r = np.squeeze(np.asarray(r_squeeze))


def Internal(Ri,R,Smth,W):
    out = np.array([])
    for i in range(len(R)):
        for wi,ri in zip(W,Ri):
            Int = Smth[i]*wi*(ri-R[i,:])/(la.norm(ri-R[i,:])**3)          
            out = np.append(out,Int)
    return(out)

output = Internal(r_i,r,Smooth,w_i)

rshape = np.shape(r)
r_ishape = np.shape(r_i)

output = np.reshape(output, (len(r),len(w_i),2))

#Sum over the masses - the three values 
Final_Mix = np.array([])
for i in range(len(r_squeeze)):
    Mass_Sum = sum(output[i])
    Final_Mix = np.append(Final_Mix, Mass_Sum)

Final_Mix = np.reshape(Final_Mix, (len(r),2,-1))

re = np.reshape(r, (len(r),2,-1))
#Equation 3 completed

Sum = np.array([])
for i in range(len(Final_Mix)):
    Inter = beta*((1/(4*math.pi*rho)*(Final_Mix[i,:])+re[i]/3))
    Sum = np.append(Sum,Inter)


#Reshape the arrays into useable forms
Sum = Sum.reshape(len(Final_Mix),2)

X = r[:,0]
Y = r[:,1]

#Plot them vectors

fig = plt.figure()
plt.quiver(X,Y,Sum[:,0],Sum[:,1])
axes = plt.gca()
axes.set_aspect(1)
plt.ylim(-500,500)
plt.xlim(-500,500)
fig.suptitle('Peculiar Velocity Field')
plt.xlabel('x coordinate')
plt.ylabel('y coordinate')

plt.show()

cProfile.run('re.compile("N_MassPipe")')
